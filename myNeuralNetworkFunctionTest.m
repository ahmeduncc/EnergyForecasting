function [Y,Xf,Af] = myNeuralNetworkFunctionTest(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 29-Mar-2017 00:46:44.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x8 cell 1, initial 8 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 8 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x8 cell 1, final 8 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0;
x1_step1.gain = 1.06382978723404e-05;
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.3430694102636884;1.7527035606816932;-1.0992223545511921;-0.80669151180130971;0.18865000398073667;0.61815768829903628;-0.29494857263322383;-0.77687241251064776;1.3172363664478166;1.9955167570556824];
IW1_1 = [1.1492278837507752 0.69744680013136717 0.4288583968253693 -0.72610038271327415 0.5578256473972133 1.1128437914816247 -0.47415342413146355 -0.29336982953975871;0.24037423871875532 0.0025816348355213155 0.11653293560157288 0.5147763369227093 -0.51890833731622965 -1.0910971791211062 0.88578940018732177 0.94667368623835635;0.69389556563344479 1.4603734571896823 0.8341186780567742 -0.17750035240829121 0.90516435661193995 0.32507825694273385 -0.94070994095084981 -1.0083887105362899;0.19270667155030333 0.35511492997979166 -0.79612948212118451 -0.43666495181006926 -0.48919368772931415 1.0539177244015669 0.765770626278515 -0.53533771041260236;-0.19202868724103014 -0.36284805757570648 0.60899509638430027 -0.44553585139535606 0.85283142739386109 1.1417623670092092 0.60831861452307989 1.1332055507386372;-0.69169739880061654 -1.1286944627608086 -0.034637023582899537 -0.25814349821571836 -0.67916658066826807 -0.72269211103595732 -0.5139935728137347 -0.5246619903908446;2.4725707374618962 -0.85137408418813409 0.1075940958581027 -0.64613476003945403 -0.17252487649565787 0.008137130232099464 -0.057091221623599059 -0.25521839514986555;0.47535860708580768 -0.92580350321848992 -0.57928896245758354 -0.90959109263423588 0.0048611667558865253 -0.97971424289229092 -0.9816306097703138 0.9054886502696663;0.58696426168094107 0.14402200014287475 0.3286243566651133 -1.6182136969081644 0.57300423998439531 -0.59223057297879589 -0.48754207917193748 0.19645439791028785;1.2177390625976443 -0.72428780846788232 0.58030761273889087 1.0180747533251202 0.36652155178158974 0.21644010264906688 -0.33872822078064557 -0.28610785706963515];

% Layer 2
b2 = -0.29410255498590177;
LW2_1 = [-0.2213460775265936 0.43989592944538491 0.42893186619671042 0.13879937261193726 -0.13903205684888184 -0.36496834077751777 0.4211699826563523 0.21638604993132665 -0.30304233870543174 0.46907715670868289];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.06382978723404e-05;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,9);
for ts=1:8
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+7,9)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7 8]-1,9)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 8);
xits = finalxts(finalxts<=8);
xts = finalxts(finalxts>8)-8;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
